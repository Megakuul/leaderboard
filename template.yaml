AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  leaderboard

  Sample SAM Template for leaderboard

Parameters:
  CognitoDomainPrefix:
    Type: String
    Default: "leaderboard"
    Description: "Domain prefix where the leaderboard cognito provider is hosted on."
  LeaderboardDomain:
    Type: String
    Default: "leaderboard.megakuul.ch"
    Description: "Domain where the application (api & frontend) is hosted on."
  MaxDatabaseRCU:
    Type: Number
    Default: 100 # Set to -1 to not use any maximum (applicable if you only fear god)
    Description: "Maximum read capacity units on every dynamodb entrypoint (if reached the database is throttled)"
  MaxDatabaseWCU:
    Type: Number
    Default: 100 # Set to -1 to not use any maximum (applicable if you only fear god)
    Description: "Maximum write capacity units on every dynamodb entrypoint (if reached the database is throttled)"

Globals:
  Function:
    Timeout: 2

Resources:
  LeaderboardUserTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: leaderboard-users
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
          # username is used as base table partition key for efficient user queries.
        - AttributeName: "username"
          AttributeType: "S"

          # unlike on the base table GSI does not require a unique primary key, therefore we can use the elo (non unique) here.
        - AttributeName: "elo"
          AttributeType: "N"
          # there is no need for a sort key as the partition key of the GSI is internally sorted
          # and we don't perform complex queries involving more then just one attribute.
      GlobalSecondaryIndexes:
        IndexName: elo_gsi
        KeySchema:
          - AttributeName: "elo"
            AttributeType: "HASH"
        OnDemandThroughput:
          MaxReadRequestUnits: !Ref MaxDatabaseRCU
          MaxWriteRequestUnits: !Ref MaxDatabaseWCU

      KeySchema:
        - AttributeName: "username"
          AttributeType: "HASH"
      OnDemandThroughput:
        MaxReadRequestUnits: !Ref MaxDatabaseRCU
        MaxWriteRequestUnits: !Ref MaxDatabaseWCU

  LeaderboardCognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: "leaderboard-auth-pool"
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      MfaConfiguration: OPTIONAL
  
  LeaderboardCognitoUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Ref CognitoDomainPrefix
      UserPoolId: !Ref LeaderboardCognitoUserPool

  LeaderboardCognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref LeaderboardCognitoUserPool
      ClientName: "leaderboard-auth-client"
      GenerateSecret: false
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows: implicit
      AllowedOAuthScopes:
        - openid
        - profile
      CallbackURLs:
        - !Sub "https://${LeaderboardDomain}"


  LeaderboardCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref LeaderboardDomain
      ValidationMethod: "DNS"
      DomainValidationOption:
        - DomainName: !Ref LeaderboardDomain
          ValidationDomain: !Ref LeaderboardDomain

  LeaderboardCDNOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: "leaderboard-cdn-origin-access"
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  LeaderboardCDN:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        PriceClass: "PriceClass_All"
        ViewerCertificate:
          AcmCertificateArn: !Ref LeaderboardCertificate
          SslSupportMethod: "sni-only"
          MinimumProtocolVersion: "TLSv1.2_2021"
        Origins:
          - Id: "leaderboard-web-bucket"
            DomainName: !GetAtt LeaderboardWebBucket.DomainName
            OriginAccessControlId: !GetAtt LeaderboardCDNOriginAccessControl.Id
            S3OriginConfig: {}
          - Id: "leaderboard-api-gateway"
            DomainName: !Ref LeaderboardDomain
            CustomOriginConfig:
              OriginProtocolPolicy: "https-only"
        DefaultCacheBehavior:
          TargetOriginId: "leaderboard-web-bucket"
          AllowedMethods:
            - GET
            - HEAD
          CacheMethods:
            - GET
            - HEAD
          ViewerProtocolPolicy: "redirect-to-https"
        CacheBehaviors:
          - PathPattern: "/api/*"
            TargetOriginId: "leaderboard-api-gateway"
            AllowedMethods:
              - GET
              - HEAD
            Compress: false
            ViewerProtocolPolicy: redirect-to-https
        Aliases:
          - !Ref LeaderboardDomain
      Tags:
        - Key: "Name"
          Value: "leaderboard-cdn"


  LeaderboardWebBucket:
    Type: AWS::S3::Bucket
    Properties:
      Tags:
        - Key: "Name"
          Value: "leaderboard-web-bucket"

  LeaderboardWebBucketBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref LeaderboardWebBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "s3:GetObject"
            Effect: Allow
            Resource:
              - !Sub "${LeaderboardWebBucket.Arn}/*"
            Principal:
              Service: cloudfront.amazonaws.com
            Condition:
              StringEquals:
                "AWS:SourceArn": 
                  - !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${LeaderboardCDN}"

  LeaderboardApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      Domain:
        CertificateArn: !Ref LeaderboardCertificate
        DomainName: !Ref LeaderboardDomain

      Auth:
        Authorizers:
          OAuth2Authorizer:
            # Read the access token from authorization header
            IdentitySource: "$request.header.Authorization"
            # Verify access token with public key at cognito issuer (and the user pools aud)
            JwtConfiguration:
              issuer: !Sub https://cognito-idp.${AWS::Region}.amazonaws.com/${LeaderboardCognitoUserPool}
              audience:
                - !Ref LeaderboardCognitoUserPool

        DefaultAuthorizer: OAuth2Authorizer
      StageName: Prod

  LeaderboardFetchFunc:
    Type: AWS::Serverless::Function
    Metadata:
      Buildmethod: go1.x
    Properties:
      CodeUri: api/fetch
      Handler: fetch
      Runtime: provided.al2023
      Events:
        FetchLeaderboard:
          Type: HttpApi
          Properties:
            Path: /api/fetch
            Method: GET
            ApiId: !Ref LeaderboardApi
            Auth:
              Authorizer: NONE
      Environment:
        Variables:
          USERTABLE: !Ref LeaderboardUserTable
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref LeaderboardUserTable

  LeaderboardUpdateFunc:
    Type: AWS::Serverless::Function
    Metadata:
      Buildmethod: go1.x
    Properties:
      CodeUri: api/update
      Handler: update
      Runtime: provided.al2023
      Events:
        FetchLeaderboard:
          Type: HttpApi
          Properties:
            Path: /api/update
            Method: POST
            ApiId: !Ref LeaderboardApi
      Environment:
        Variables:
          USERTABLE: !Ref LeaderboardUserTable
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref LeaderboardUserTable

  LeaderboardAddGameFunc:
    Type: AWS::Serverless::Function
    Metadata:
      Buildmethod: go1.x
    Properties:
      CodeUri: api/addgame
      Handler: addgame
      Runtime: provided.al2023
      Events:
        FetchLeaderboard:
          Type: HttpApi
          Properties:
            Path: /api/addgame
            Method: POST
            ApiId: !Ref LeaderboardApi
      Environment:
        Variables:
          USERTABLE: !Ref LeaderboardUserTable
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref LeaderboardUserTable
        - DynamoDBWritePolicy:
            TableName: !Ref LeaderboardUserTable

Outputs:
  CognitoEndpoint:
    Description: "Cognito frontend endpoint. Provide this url to the frontend."
    Value: !GetAtt LeaderboardCognitoUserPool.ProviderURL
  WebBucket:
    Description: "Frontend host bucket. Insert the Webapplication here."
    Value: !GetAtt LeaderboardWebBucket.Arn