AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  leaderboard

  Sample SAM Template for leaderboard

Parameters:
  CognitoDomainPrefix:
    Type: String
    Description: "Domain prefix where the leaderboard cognito provider is hosted on. This must be globally unique."
  LeaderboardDomain:
    Type: String
    Description: "Domain where the application (api & frontend) is hosted on."
  LeaderboardDomainCertificateArn:
    Type: String
    Description: "ARN of the ACM certificate for the LeaderboardDomain."
  MaxDatabaseRCU:
    Type: Number
    Default: 100 # Set to -1 to not use any maximum (applicable if you only fear god)
    Description: "Maximum read capacity units on every dynamodb entrypoint (if reached the database is throttled)"
  MaxDatabaseWCU:
    Type: Number
    Default: 100 # Set to -1 to not use any maximum (applicable if you only fear god)
    Description: "Maximum write capacity units on every dynamodb entrypoint (if reached the database is throttled)"

Globals:
  Function:
    Timeout: 5

Resources:
  # Using ugly separator comments because cloudformation is dogwater:
  # ============================================
  # =========== Cognito Authentication =========
  # ============================================


  LeaderboardCognitoUserPool:
    Type: AWS::Cognito::UserPool
    # Change this to Retain if you want to keep the user data after deleting the stack.
    DeletionPolicy: Delete
    Properties:
      UserPoolName: "leaderboard-auth-pool"
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      UsernameConfiguration:
        CaseSensitive: true
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Mutable: true
          Name: preferred_username
          Required: true
        - AttributeDataType: String
          Mutable: true
          Name: email
          Required: true
      EmailConfiguration:
        EmailSendingAccount: COGNITO_DEFAULT
      VerificationMessageTemplate:
        DefaultEmailOption: CONFIRM_WITH_CODE
      AutoVerifiedAttributes:
        - email
        # pref
      EnabledMfas:
        - "SOFTWARE_TOKEN_MFA"
      MfaConfiguration: "ON"

      

  
  LeaderboardCognitoUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Ref CognitoDomainPrefix
      UserPoolId: !Ref LeaderboardCognitoUserPool

  LeaderboardCognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref LeaderboardCognitoUserPool
      ClientName: "leaderboard-auth-client"
      SupportedIdentityProviders:
        - COGNITO
      GenerateSecret: false
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows: 
        - "implicit"
      AllowedOAuthScopes:
        - openid
        - profile
        - email
      CallbackURLs:
        - !Sub "https://${LeaderboardDomain}"
      DefaultRedirectURI: !Sub "https://${LeaderboardDomain}"


  # ============================================
  # =========== SES ============================
  # ============================================


  LeaderboardEmailIdentity:
    Type: AWS::SES::EmailIdentity
    Properties:
      EmailIdentity: !Ref LeaderboardDomain

  LeaderboardEmailTemplate:
    Type: AWS::SES::Template
    Properties:
      Template:
        TemplateName: !Sub "leaderboard-confirmation-template"
        SubjectPart: "Leaderboard Confirmation for Game {{gameid}}"
        HtmlPart: !Sub |
          <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
            <h1 style="color: #2c3e50;">Game {{gameid}} Results</h1>
            
            <p>You have been added to Game {{gameid}} by another player. Here are the reported results:</p>
            
            <div style="background-color: #f8f9fa; border: 1px solid #e9ecef; border-radius: 5px; padding: 15px; margin-bottom: 20px;">
                <p><strong>Placement:</strong> {{placement}}</p>
                <p><strong>Points:</strong> {{points}}</p>
                <p><strong>Elo Rating Change:</strong> {{elo_update}}</p>
            </div>
            
            <p>To verify and accept these results, please click the button below:</p>
            
            <div style="text-align: start;">
                <a href="https://${LeaderboardDomain}/api/game/confirm?gameid={{gameid}}&username={{username}}&code={{secret}}" style="display: inline-block; background-color: #3498db; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;">Confirm Results</a>
            </div>
            
            <p style="margin-top: 20px; font-size: 0.9em; color: #7f8c8d;">If you believe there's an error in these results, please contact the game organizer.</p>
          </div>
        TextPart: !Sub |
          Game {{gameid}} Results

          You have been added to Game {{gameid}} by another player. Here are the reported results:
          Placement: {{placement}}
          Points: {{points}}
          Elo Rating Change: {{elo_update}}
          
          To verify and accept these results, please click the link below:
          https://${LeaderboardDomain}/api/game/confirm?gameid={{gameid}}&username={{username}}&code={{secret}}

          If you believe there's an error in these results, please contact the game organizer.
       



  # ============================================
  # =========== CDN Proxy ======================
  # ============================================

  LeaderboardCDNOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: "leaderboard-cdn-origin-access"
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  LeaderboardCDNWebCachePolicy:
    Type: AWS::CloudFront::CachePolicy
    Properties:
      CachePolicyConfig:
        Name: "leaderboard-web-cache-policy"
        DefaultTTL: 86400 # 1 day
        MinTTL: 1 # 1 second
        MaxTTL: 31536000 # 1 year
        ParametersInCacheKeyAndForwardedToOrigin:
          CookiesConfig:
            CookieBehavior: "none"
          EnableAcceptEncodingBrotli: true
          EnableAcceptEncodingGzip: true
          HeadersConfig:
            HeaderBehavior: none
          QueryStringsConfig:
            QueryStringBehavior: none

  LeaderboardCDNApiCachePolicy:
    Type: AWS::CloudFront::CachePolicy
    Properties:
      CachePolicyConfig:
        Name: "leaderboard-api-cache-policy"
        DefaultTTL: 0
        MinTTL: 0
        MaxTTL: 0
        ParametersInCacheKeyAndForwardedToOrigin:
          CookiesConfig:
            CookieBehavior: "none"
          EnableAcceptEncodingBrotli: false
          EnableAcceptEncodingGzip: false
          HeadersConfig:
            HeaderBehavior: none
          QueryStringsConfig:
            QueryStringBehavior: none

  LeaderboardCDNApiOriginRequestPolicy:
    Type: AWS::CloudFront::OriginRequestPolicy
    Properties:
      OriginRequestPolicyConfig:
        Name: "leaderboard-api-origin-policy"
        CookiesConfig:
          CookieBehavior: all
        HeadersConfig:
          HeaderBehavior: allExcept
          Headers:
            - host # exclude host implicitly tells cloudfront to replace it with the api gateway origin host
        QueryStringsConfig:
          QueryStringBehavior: all

  LeaderboardCDN:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        PriceClass: "PriceClass_All"
        DefaultRootObject: "index.html"
        ViewerCertificate:
          AcmCertificateArn: !Ref LeaderboardDomainCertificateArn
          SslSupportMethod: "sni-only"
          MinimumProtocolVersion: "TLSv1.2_2021"
        Origins:
          - Id: "leaderboard-web-bucket"
            DomainName: !GetAtt LeaderboardWebBucket.RegionalDomainName
            OriginAccessControlId: !GetAtt LeaderboardCDNOriginAccessControl.Id
            S3OriginConfig: {}
          - Id: "leaderboard-api-gateway"
            # ApiEndpoint includes https:// which is trimmed of by splitting and selectin the 3 element (index 2)
            DomainName: !Select [2, !Split ["/", !Sub "${LeaderboardApi.ApiEndpoint}"]]
            CustomOriginConfig:
              OriginProtocolPolicy: "https-only"
        DefaultCacheBehavior:
          TargetOriginId: "leaderboard-web-bucket"
          AllowedMethods:
            - GET
            - HEAD
          CachedMethods:
            - GET
            - HEAD
          ViewerProtocolPolicy: "redirect-to-https"
          CachePolicyId: !Ref LeaderboardCDNWebCachePolicy

        CacheBehaviors:
          - PathPattern: "/api/*"
            TargetOriginId: "leaderboard-api-gateway"
            AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
              - PUT
              - PATCH
              - POST
              - DELETE
            Compress: false
            ViewerProtocolPolicy: redirect-to-https
            CachePolicyId: !Ref LeaderboardCDNApiCachePolicy
            OriginRequestPolicyId: !Ref LeaderboardCDNApiOriginRequestPolicy
        Aliases:
          - !Ref LeaderboardDomain
      Tags:
        - Key: "Name"
          Value: "leaderboard-cdn"


  # ============================================
  # =========== Frontend =======================
  # ============================================


  LeaderboardWebBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
        BlockPublicPolicy: false
        RestrictPublicBuckets: false
      Tags:
        - Key: "Name"
          Value: "leaderboard-web-bucket"

  LeaderboardWebBucketBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref LeaderboardWebBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "s3:GetObject"
            Effect: Allow
            Resource:
              - !Sub "${LeaderboardWebBucket.Arn}/*"
            Principal:
              Service: cloudfront.amazonaws.com
            Condition:
              StringEquals:
                "AWS:SourceArn": 
                  - !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${LeaderboardCDN}"


  # ============================================
  # =========== Database =======================
  # ============================================


  LeaderboardUserTable:
    Type: AWS::DynamoDB::Table
    # Change this to Retain if you want to keep the user data after deleting the stack.
    DeletionPolicy: Delete
    Properties:
      TableName: leaderboard-users
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
          # subject is used as base table partition key because it is used for writes.
          # updates on attributes can NOT use GSIs so they must use the subject as identifier.
        - AttributeName: "subject"
          AttributeType: "S"

          # username gsi is defined to perform quick lookups by username.
        - AttributeName: "username"
          AttributeType: "S"
          # elo gsi is defined to perform quick lookups by elo.
          # unlike on the base table, GSI does not require a unique primary key, therefore we can use the elo (non unique) here.
        - AttributeName: "elo"
          AttributeType: "N"

          # region is used as a partition key for the sorted core leaderboard.
          # as long as this doesn't operate multi-regional, this is more like a dummy value.
          # the reason it is used, is because dynamodb does not allow us to perform sorted queries over multiple partition keys.
          # the region workaround lets us use it as part key using a LSI to sort the entries.
          # using such a part key can cause a "hot"-partition which in that case is inevitable. 
          # to scale it the leaderboard can be split up into "regions" to distribute it across regions.
          # this is fine but not optimal (below 200'000 entries per region this should have a very well read performance).
          # for a large scaled application that requires sorted queries over all items, consider not using dynamodb.
        - AttributeName: "user_region"
          AttributeType: "S"
      GlobalSecondaryIndexes:
        - IndexName: username_gsi
          KeySchema:
            - AttributeName: "username"
              KeyType: "HASH"
          Projection:
            ProjectionType: ALL
          OnDemandThroughput:
            MaxReadRequestUnits: !Ref MaxDatabaseRCU
            MaxWriteRequestUnits: !Ref MaxDatabaseWCU
        - IndexName: region_gsi
          KeySchema:
            - AttributeName: "user_region"
              KeyType: "HASH"
            - AttributeName: "elo"
              KeyType: "RANGE"
          Projection:
            ProjectionType: ALL
          OnDemandThroughput:
            MaxReadRequestUnits: !Ref MaxDatabaseRCU
            MaxWriteRequestUnits: !Ref MaxDatabaseWCU

      KeySchema:
        - AttributeName: "subject"
          KeyType: "HASH"
      OnDemandThroughput:
        MaxReadRequestUnits: !Ref MaxDatabaseRCU
        MaxWriteRequestUnits: !Ref MaxDatabaseWCU

  LeaderboardGameTable:
    Type: AWS::DynamoDB::Table
    # Change this to Retain if you want to keep the user data after deleting the stack.
    DeletionPolicy: Delete
    Properties:
      TableName: leaderboard-games
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
          # gameid is used as base table partition key for efficient user queries.
        - AttributeName: "gameid"
          AttributeType: "S"

          # game_date is used to query for multiple games based on a date.
        - AttributeName: "game_date"
          AttributeType: "S"
      GlobalSecondaryIndexes:
        - IndexName: date_gsi
          KeySchema:
            - AttributeName: "game_date"
              KeyType: "HASH"
          Projection:
            ProjectionType: ALL
          OnDemandThroughput:
            MaxReadRequestUnits: !Ref MaxDatabaseRCU
            MaxWriteRequestUnits: !Ref MaxDatabaseWCU

      TimeToLiveSpecification:
        AttributeName: "expires_in"
        Enabled: true
      KeySchema:
        - AttributeName: "gameid"
          KeyType: "HASH"
      OnDemandThroughput:
        MaxReadRequestUnits: !Ref MaxDatabaseRCU
        MaxWriteRequestUnits: !Ref MaxDatabaseWCU


  # ============================================
  # =========== Backend API ====================
  # ============================================


  LeaderboardApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      # If you want to allow other origins to access the api, you can set this property.
      # CorsConfiguration: "*"
      Auth:
        Authorizers:
          OAuth2Authorizer:
            # Read the access token from authorization header
            IdentitySource: "$request.header.Authorization"
            # Verify access token with public key at cognito issuer (and the user pools aud)
            JwtConfiguration:
              issuer: !Sub https://cognito-idp.${AWS::Region}.amazonaws.com/${LeaderboardCognitoUserPool}
              audience:
                - !GetAtt LeaderboardCognitoUserPoolClient.ClientId

        DefaultAuthorizer: OAuth2Authorizer

  LeaderboardUserFetchFunc:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: api/user/fetch
      Handler: fetch
      Runtime: provided.al2023
      Architectures:
        - x86_64
      Events:
        FetchLeaderboard:
          Type: HttpApi
          Properties:
            Path: /api/user/fetch
            Method: GET
            ApiId: !Ref LeaderboardApi
            Auth:
              Authorizer: NONE
      Environment:
        Variables:
          USERTABLE: !Ref LeaderboardUserTable
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref LeaderboardUserTable

  LeaderboardUserUpdateFunc:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: api/user/update
      Handler: update
      Runtime: provided.al2023
      Events:
        FetchLeaderboard:
          Type: HttpApi
          Properties:
            Path: /api/user/update
            Method: POST
            ApiId: !Ref LeaderboardApi
      Environment:
        Variables:
          USERTABLE: !Ref LeaderboardUserTable
          BASEELO: "200"
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref LeaderboardUserTable

  LeaderboardGameFetchFunc:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: api/game/fetch
      Handler: fetchgame
      Runtime: provided.al2023
      Events:
        FetchLeaderboard:
          Type: HttpApi
          Properties:
            Path: /api/game/fetch
            Method: GET
            ApiId: !Ref LeaderboardApi
            Auth:
              Authorizer: NONE
      Environment:
        Variables:
          GAMETABLE: !Ref LeaderboardGameTable
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref LeaderboardGameTable

  LeaderboardGameAddFunc:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: api/game/add
      Handler: add
      Runtime: provided.al2023
      Events:
        FetchLeaderboard:
          Type: HttpApi
          Properties:
            Path: /api/game/add
            Method: POST
            ApiId: !Ref LeaderboardApi
      Environment:
        Variables:
          USERTABLE: !Ref LeaderboardUserTable
          GAMETABLE: !Ref LeaderboardGameTable
          MAILTEMPLATE: !Sub "leaderboard-confirmation-template"
          MAILSENDER: !Sub "noreply@${LeaderboardDomain}"
          MAXIMUM_PARTICIPANTS: 40
          CONFIRM_SECRET_LENGTH: 20
          HOURS_UNTIL_EXPIRED: 24
          MAX_LOSS_NUMBER: 40
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref LeaderboardUserTable
        - DynamoDBWritePolicy:
            TableName: !Ref LeaderboardUserTable
        - DynamoDBReadPolicy:
            TableName: !Ref LeaderboardGameTable
        - DynamoDBWritePolicy:
            TableName: !Ref LeaderboardGameTable
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Resource: !Sub "arn:aws:ses:${AWS::Region}:${AWS::AccountId}:identity/noreply@${LeaderboardDomain}"
              Action: 
                - "ses:SendBulkEmail"
                - "ses:SendBulkTemplatedEmail"
            - Effect: Allow
              Resource: !Sub "arn:aws:ses:${AWS::Region}:${AWS::AccountId}:identity/${LeaderboardDomain}"
              Action: 
                - "ses:SendBulkEmail"
                - "ses:SendBulkTemplatedEmail"
            - Effect: Allow
              Resource: !Sub "arn:aws:ses:${AWS::Region}:${AWS::AccountId}:template/leaderboard-confirmation-template"
              Action:
                - "ses:SendBulkTemplatedEmail"
                - "ses:GetEmailTemplate"
              
  LeaderboardGameConfirmFunc:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: go1.x
    Properties:
      CodeUri: api/game/confirm
      Handler: confirm
      Runtime: provided.al2023
      Events:
        FetchLeaderboard:
          Type: HttpApi
          Properties:
            Path: /api/game/confirm
            Method: GET
            ApiId: !Ref LeaderboardApi
            Auth:
              Authorizer: NONE
      Environment:
        Variables:
          USERTABLE: !Ref LeaderboardUserTable
          GAMETABLE: !Ref LeaderboardGameTable
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref LeaderboardUserTable
        - DynamoDBWritePolicy:
            TableName: !Ref LeaderboardUserTable
        - DynamoDBReadPolicy:
            TableName: !Ref LeaderboardGameTable
        - DynamoDBWritePolicy:
            TableName: !Ref LeaderboardGameTable


Outputs:
  DeploymentRegion:
    Description: "Region where the system was deployed."
    Value: !Sub "${AWS::Region}"
  CDNEndpoint:
    Description: "CloudFront CDN endpoint."
    Value: !Sub "${LeaderboardCDN.DomainName}"
  WebBucket:
    Description: "Frontend host bucket name. Insert the Webapplication here."
    Value: !Ref LeaderboardWebBucket
  CognitoEndpoint:
    Description: "Cognito frontend endpoint. Provide this url to the frontend."
    Value: !Sub "https://${CognitoDomainPrefix}.auth.${AWS::Region}.amazoncognito.com"
  CognitoClientID:
    Description: "Cognito client ID. Provide this id to the frontend."
    Value: !GetAtt LeaderboardCognitoUserPoolClient.ClientId
  CNameEntries:
    Description: "cname entry that must be set on the dns to correctly resolve the frontend & api endpoint"
    Value: !Sub "${LeaderboardDomain} CNAME ${LeaderboardCDN.DomainName}"
  DMARCEntries:
    Description: "dmarc entry that must be set on the dns to specify how dkim and spf failures are handled"
    Value: !Sub "_dmarc.${LeaderboardDomain} TXT v=DMARC1; p=reject; pct=100; adkim=s; aspf=s;"
  DKIMEntries:
    # DKIM Records are also used to verify the domain in SES: https://docs.aws.amazon.com/ko_kr/AWSCloudFormation/latest/UserGuide/aws-resource-ses-emailidentity.html
    Description: "dkim entries that must be set on the leaderboard domain (this is also used to verify the domain on SES)"
    Value:
      Fn::Join:
        - "\n"
        - - ""
          - ""
          - Fn::Sub: "${LeaderboardEmailIdentity.DkimDNSTokenName1} CNAME ${LeaderboardEmailIdentity.DkimDNSTokenValue1}"
          - Fn::Sub: "${LeaderboardEmailIdentity.DkimDNSTokenName2} CNAME ${LeaderboardEmailIdentity.DkimDNSTokenValue2}"
          - Fn::Sub: "${LeaderboardEmailIdentity.DkimDNSTokenName3} CNAME ${LeaderboardEmailIdentity.DkimDNSTokenValue3}"
  SPFEntries:
    Description: "spf entry that must be set on the leaderboard domain"
    Value: !Sub "${LeaderboardDomain} TXT v=spf1 include:amazonses.com -all"